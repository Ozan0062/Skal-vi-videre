@page "/UpdateEvents/{eventId:int}"

@using Skal_vi_videre.Repository
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Opdater Event</PageTitle>

<div class="row">
    <EditForm Model="Input" OnValidSubmit="UpdateEvents">
        <DataAnnotationsValidator />
        <hr />
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-danger">
                @Message
            </div>
        }
        <!-- Main container with form and map side by side -->
        <div class="d-flex">
            <!-- Left side with form -->
            <div class="col-lg-6 d-flex flex-column me-2">
                <!-- Title -->
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Title" id="title" class="form-control" style="border: 4px solid #2b59a2; border-radius: 8px; height: 80px;" />
                    <label for="title">Titel</label>
                    <ValidationMessage For="() => Input.Title" />
                </div>

                <div class="form-floating mb-3">
                    <InputTextArea @bind-Value="Input.Description" id="description" class="form-control" style="border: 4px solid #2b59a2; border-radius: 8px; height: 150px;" />
                    <label for="description">Beskrivelse</label>
                    <ValidationMessage For="() => Input.Description" />
                </div>

                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="Input.Genre" id="genre" class="form-control" style="border: 4px solid #2b59a2; border-radius: 8px; height: 80px;">
                        <option value="" disabled>Vælg genre</option>
                        <option value="Musik">Musik</option>
                        <option value="Teater">Teater</option>
                        <option value="Kunst">Kunst</option>
                        <option value="Sport">Sport</option>
                        <option value="Byliv">Byliv</option>
                        <option value="Andet">Andet</option>
                    </InputSelect>
                    <label for="genre">Genre</label>
                    <ValidationMessage For="() => Input.Genre" />
                </div>

                <div class="form-floating mb-3">
                    <input type="datetime-local" @bind="Input.StartDate" id="startDate" class="form-control" style="border: 4px solid #2b59a2; border-radius: 8px; height: 80px;" />
                    <label for="startDate">Start dato</label>
                    <ValidationMessage For="() => Input.StartDate" />
                </div>

                <div class="form-floating mb-3">
                    <input type="datetime-local" @bind="Input.EndDate" id="endDate" class="form-control" style="border: 4px solid #2b59a2; border-radius: 8px; height: 80px;" />
                    <label for="endDate">Slut dato</label>
                    <ValidationMessage For="() => Input.EndDate" />
                </div>
                <div class="form-floating mb-3">
                    <div class="input-group">
                        <InputText @bind-Value="Input.Location"
                        class="form-control" id="location"
                        style="border: 4px solid #2b59a2; border-radius: 8px; height: 80px;" />
                        <button class="btn" @onclick="OnUpdateMapClick" type="button">
                            <i class="fa-solid fa-map"></i>
                        </button>
                    </div>
                    <label for="location">Lokation</label>
                    <ValidationMessage For="() => Input.Location" />
                </div>
                <button type="submit" id="create" class="w-100 btn btn-lg btn-primary" style="background-color: #2b59a2;">Opdater Event</button>
            </div>

            <!-- Right side with Google Map -->
            <div class="col-lg-6">
                <div id="map" style="height: 100%;">
                    <h3>Google Maps</h3>
                    <div id="@MapContainerId" style="height: 600px; width: 100%;" hidden></div>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {
    [Parameter] public int eventId { get; set; }
    EventRepository eventRepository = new EventRepository();
    private InputModel Input { get; set; } = new InputModel();
    Event events = new Event();
    private string Message;

    protected override async Task OnInitializedAsync()
    {
        var existingEvent = eventRepository.Get(eventId);
        if (existingEvent == null)
        {
            NavigationManager.NavigateTo("/Error");
            return;
        }

        Input = new InputModel
            {
                Title = existingEvent.Title,
                Description = existingEvent.Description,
                Genre = existingEvent.Genre,
                StartDate = existingEvent.StartDate,
                EndDate = existingEvent.EndDate,
                Location = existingEvent.Location
            };
    }

    private async Task UpdateEvents()
    {
        try
        {
            var eventToUpdate = new Event
                {
                    Id = eventId,
                    Title = Input.Title,
                    Description = Input.Description,
                    Genre = Input.Genre,
                    StartDate = Input.StartDate,
                    EndDate = Input.EndDate,
                    Location = Input.Location
                };
            eventToUpdate.Validate();
            eventRepository.Update(eventId, eventToUpdate);
            NavigationManager.NavigateTo("/Events");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            Message = "Opdatering af event mislykkedes";
        }
    }

    private class InputModel
    {
        [Required(ErrorMessage = "Titel er påkrævet.")]
        [Display(Name = "Titel")]
        public string Title { get; set; } = string.Empty;

        [Required(ErrorMessage = "Beskrivelse af event er påkrævet.")]
        [Display(Name = "Beskrivelse af event")]
        public string Description { get; set; } = string.Empty;

        [Required(ErrorMessage = "Genre er påkrævet.")]
        [Display(Name = "Genre")]
        public string Genre { get; set; } = string.Empty;

        [Required(ErrorMessage = "Startdato er påkrævet.")]
        [DataType(DataType.DateTime, ErrorMessage = "Indtast venligst en gyldig startdato.")]
        [Display(Name = "Startdato")]
        [StartDateValidation]
        public DateTime StartDate { get; set; }

        [Required(ErrorMessage = "Slutdato er påkrævet.")]
        [DataType(DataType.DateTime, ErrorMessage = "Indtast venligst en gyldig slutdato.")]
        [Display(Name = "Slutdato")]
        [EndDateValidation]
        public DateTime EndDate { get; set; }

        [Required(ErrorMessage = "Lokation er påkrævet.")]
        [Display(Name = "Lokation")]
        public string Location { get; set; } = string.Empty;


        // Brugerdefineret validering for StartDate
        public class StartDateValidation : ValidationAttribute
        {
            public override bool IsValid(object value)
            {
                if (value is DateTime startDate)
                {
                    // Tjek om startdatoen er i fortiden
                    if (startDate < DateTime.Now)
                    {
                        ErrorMessage = "Startdatoen kan ikke være i fortiden.";
                        return false;
                    }
                    return true;
                }
                return false;
            }
        }

        // Brugerdefineret validering for EndDate
        public class EndDateValidation : ValidationAttribute
        {
            public override bool IsValid(object value)
            {
                if (value is DateTime endDate)
                {
                    // Tjek om slutdatoen er før startdatoen
                    if (endDate < DateTime.Now)
                    {
                        ErrorMessage = "Slutdatoen kan ikke være i fortiden.";
                        return false;
                    }
                    return true;
                }
                return false;
            }
        }
    }

    [Parameter] public double Latitude { get; set; } = 55.630846563348534;  // Standardværdi
    [Parameter] public double Longitude { get; set; } = 12.078656210578572;  // Standardværdi
    [Parameter] public string MapContainerId { get; set; } = "homeMap";

    private bool isMapLoaded = false;

    public async Task LoadMap()
    {
        // Fjern 'hidden'-attributten
        await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{MapContainerId}').removeAttribute('hidden');");

        // Hvis Latitude og Longitude er standardværdier, betyder det, at vi skal bruge brugerens geolocation
        if (Latitude == 55.630846563348534 && Longitude == 12.078656210578572)
        {
            var location = await JSRuntime.InvokeAsync<MapLocation>("getUserLocation");

            // Hvis vi får geolocation, opdateres Latitude og Longitude
            if (location != null)
            {
                Latitude = location.Lat;
                Longitude = location.Lng;
            }
        }

        // Initialiser kortet med de opdaterede koordinater
        await JSRuntime.InvokeVoidAsync("initMap", MapContainerId, Latitude, Longitude);
    }

    private async Task UpdateMapLocation(string address)
    {
        if (!string.IsNullOrWhiteSpace(address))
        {
            // Hent den nye lokation baseret på adressen
            var newLocation = await JSRuntime.InvokeAsync<MapLocation>("updateMapLocation", address);

            if (newLocation != null)
            {
                // Opdater Latitude og Longitude med den nye lokation
                Latitude = newLocation.Lat;
                Longitude = newLocation.Lng;

                // Genindlæs kortet med den nye lokation
                await LoadMap();
            }
        }
    }

    private async Task OnUpdateMapClick()
    {
        var address = Input.Location?.Trim();
        if (!string.IsNullOrWhiteSpace(address))
        {
            await UpdateMapLocation(address);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadMap();
        }
    }

    public class MapLocation
    {
        public double Lat { get; set; }
        public double Lng { get; set; }
    }
}
